---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "short_name" $ }}
  labels: 
    {{ include "chart_labels" $ | nindent 4 }}
{{- with $.Values.labels }}
  {{- toYaml $.Values.labels | nindent 4 }}
{{- end }}
{{- with $.Values.annotations }}
  annotations:
    {{- toYaml $.Values.annotations | nindent 4 }}
{{- end }}

spec:
  replicas: 1
  selector:
    matchLabels:
      {{ include "chart_labels" $ | nindent 6 }}
      {{- with $.Values.podLabels }}
        {{- toYaml $.Values.labels | nindent 6 }}
      {{- end }}
  template:
    metadata:
      labels:
        {{ include "chart_labels" $ | nindent 8 }}
        {{- with $.Values.podLabels }}
          {{- toYaml $.Values.podLabels | nindent 8 }}
        {{- end }}
      {{- with $.Values.annotations }}
      annotations:
          {{- toYaml $.Values.annotations | nindent 8 }}
      {{- end }}

    spec:
      containers:
        - name: sites-monitoring
          image: "{{ $.Values.image.registry }}/{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" $.Values.image.imagePullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 0
          command:
            - /bin/bash
            - -c
            - |
              nginx || exit 1

              # timeout reimplement
              # credits : https://stackoverflow.com/a/24416732
              function run_cmd { 
                  cmd="$1"; timeout="$2";
                  grep -qP '^\d+$' <<< $timeout || timeout=90

                  ( 
                      eval "$cmd" &
                      child=$!
                      trap -- "" SIGTERM 
                      (       
                              sleep $timeout
                              kill $child 2> /dev/null 
                      ) &     
                      wait $child
                  )
              }

              function check_site() {
                URL=$1
                START=$(date +%s)
                RC=$(curl -Lm {{ $.Values.timeout }} -sIw "%{http_code}" "$URL" -o /dev/null)
                END=$(date +%s)
                echo "$(( $END - $START)) $RC $1"
              }

              function check_availability {
                WORKERS=10
                status_code=0
                unavailable_sites=""
                unavailable_sites_number=0
                total_sites_number={{ $.Values.sites | len }}
                truncate -s0 /dev/shm/check_report
                for SITE in {{ $.Values.sites | join " " }}; do
                  while [ $(jobs -r | wc -l) -gt $WORKERS ] ; do sleep 0.1 ; done
                  check_site "$SITE" >> /dev/shm/check_report
                done

                unavailable_sites_number=$(cat /dev/shm/check_report | awk '{ if ($2 >= 400) print $3 }' | wc -l)
                unavailable_sites=$(cat /dev/shm/check_report | awk '{ if ($2 >= 400) print $2"/"$3 }')

                return_msg=""
                unavailable_sites_percent=$(( (unavailable_sites_number * 100 + total_sites_number - 1) / total_sites_number ))

                if [[ "$unavailable_sites_number" -eq 0 ]]; then
                  return_msg="OK - All sites are available"
                elif [[ "$unavailable_sites_percent" -ge {{ $.Values.critical }} ]]; then
                  return_msg="CRITICAL - $unavailable_sites_percent% ($unavailable_sites_number/$total_sites_number) of the sites are unavailable : $unavailable_sites"
                elif [[ "$unavailable_sites_percent" -ge {{ $.Values.warning }} ]]; then
                  return_msg="WARNING - $unavailable_sites_percent% ($unavailable_sites_number/$total_sites_number) of the sites are unavailable : $unavailable_sites"
                else
                  return_msg="UNKNOWN - Cannot retrieve sites unavailability"
                fi
                echo "$return_msg"
              }

              while :; do
                return_msg="UNKNOWN - Cannot retrieve sites unavailability"
                return_msg=$(run_cmd "check_availability" {{ $.Values.interval }}) || return_msg="UNKNOWN - Timeout : checks exceed interval ({{ $.Values.interval }}s)"
                echo "$return_msg" > /usr/share/nginx/html/check_sites_availability
              done

          env:
            {{- with $.Values.extraEnv }}
            {{- range $k, $v := . }}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
            {{- end }}
            {{- end }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}