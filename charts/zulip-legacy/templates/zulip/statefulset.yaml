---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "short_name" . }}
  labels:
{{ include "chart_labels" . | indent 4 }}
spec:
  serviceName: {{ include "short_name" . }}-headless
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "short_name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
{{ include "chart_labels" . | indent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "short_name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
{{ include "chart_labels" . | indent 8 }}
      annotations:
        checksum/configmap: {{ include (print (dir .Template.Name) "/configmap.yaml") . | sha256sum }}
    spec:
      containers:
        - command:
          - /bin/sh
          - -ec
          - >
            export SAML_ENTITY=$(egrep '^ *"entity_id"' /etc/zulip/settings.py | tail -n1 | cut -d'"'  -f4 | cut -d/ -f3) ;
            if [ -n "$SAML_ENTITY" ] ; then
              echo | openssl s_client -showcerts -servername $SAML_ENTITY -connect $SAML_ENTITY:443 2>/dev/null | openssl x509 -inform pem > /tmp/saml.crt && ( mkdir -p /etc/zulip/saml/idps ; mv /tmp/saml.crt /etc/zulip/saml/idps/saml.crt )
            fi ;
            sed -e 's#^\s*configureCerts\s*$#configureCerts ; secretsConfiguration#' -i /sbin/entrypoint.sh ;
            /sbin/entrypoint.sh app:run
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

            - name: SECRETS_secret_key
              value: "{{ .Values.zulip.secret_key }}"

            - name: DB_HOST
              value: {{ .Release.Name }}-postgresql
            - name: DB_HOST_PORT
              value: '5432'
            - name: DB_USER
              value: 'zulip'

            - name: SECRETS_postgres_password
              value: "{{ .Values.postgresql.password }}"

            - name: SETTING_RABBITMQ_HOST
              value: "{{ .Release.Name }}-rabbitmq"
            - name: SECRETS_rabbitmq_password
              value: "{{ .Values.rabbitmq.auth.password }}"

            - name: SETTING_REDIS_HOST
              value: "{{ .Release.Name }}-redis"
            - name: SECRETS_redis_password
              value: "{{ .Values.redis.password }}"

            - name: SETTING_MEMCACHED_LOCATION
              value: "{{ .Release.Name	}}-memcached:{{ .Values.memcached.service.port }}"

            - name: SECRETS_email_password
              value: "{{ .Values.zulip.smtp.password }}"
            - name: SETTING_EMAIL_HOST
              value: "{{ .Values.zulip.smtp.host }}"
            - name: SETTING_EMAIL_HOST_USER
              value: "{{ .Values.zulip.smtp.user }}"
            - name: SETTING_EMAIL_PORT
              value: "{{ .Values.zulip.smtp.port }}"
            - name: SETTING_EMAIL_USE_SSL
              value: "{{ .Values.zulip.smtp.use_ssl | toString | camelcase }}"
            - name: SETTING_EMAIL_USE_TLS
              value: "{{ .Values.zulip.smtp.use_tls | toString | camelcase }}"

            - name: SETTING_EXTERNAL_HOST
              value: "{{ index .Values.zulip.external_hosts 0 }}"

            - name: SETTING_ZULIP_ADMINISTRATOR
              value: "{{ .Values.zulip.administrator }}"

            - name: SSL_CERTIFICATE_GENERATION
              value: self-signed

            - name: MANUAL_CONFIGURATION
              value: "true"

            - name: ZULIP_AUTH_BACKENDS
              value: "{{ .Values.zulip.auth_backend }}"

            - name: SECRETS_secret_key
              value: "{{ .Values.zulip.secret_key }}"

          image: "{{ .Values.zulip.image }}"
          name: zulip
          ports:
            - containerPort: 80
            - containerPort: 443
          resources: {}
          volumeMounts:
            - mountPath: /data
              name: data
            - name: config
              readOnly: true
              mountPath: /etc/zulip/settings.py
              subPath: settings.py

          livenessProbe:
            timeoutSeconds: 15
            successThreshold: 1
            failureThreshold: 30
            initialDelaySeconds: 5
            periodSeconds: 10
            httpGet:
              path: /
              port: 443
              scheme: HTTPS

          readinessProbe:
            timeoutSeconds: 15
            successThreshold: 1
            failureThreshold: 30
            initialDelaySeconds: 5
            periodSeconds: 10
            httpGet:
              path: /
              port: 443
              scheme: HTTPS

          startupProbe:
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 300
            periodSeconds: 2
            httpGet:
              path: /
              port: 443
              scheme: HTTPS

      restartPolicy: Always
      volumes:
        - name: config
          configMap:
            name: {{ include "short_name" . }}

  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      volumeMode: Filesystem
{{- if .Values.zulip.persistence.storageClass }}
{{- if (eq "-" .Values.zulip.persistence.storageClass) }}
      storageClassName: ""
{{- else }}
      storageClassName: "{{ .Values.zulip.persistence.storageClass }}"
{{- end }}
{{- end }}
      resources:
        requests:
          storage: {{ .Values.zulip.persistence.size | quote }}
